/*
 * DigitalRooster
 *
 * Open API for Digital Rooster
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package digitalrooster

import (
	"encoding/json"
)

// Alarm struct for Alarm
type Alarm struct {
	Time string `json:"time"`
	Period string `json:"period"`
	Url string `json:"url"`
	Enabled bool `json:"enabled"`
	Volume *int32 `json:"volume,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewAlarm instantiates a new Alarm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarm(time string, period string, url string, enabled bool, ) *Alarm {
	this := Alarm{}
	this.Time = time
	this.Period = period
	this.Url = url
	this.Enabled = enabled
	return &this
}

// NewAlarmWithDefaults instantiates a new Alarm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmWithDefaults() *Alarm {
	this := Alarm{}
	return &this
}

// GetTime returns the Time field value
func (o *Alarm) GetTime() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetTimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *Alarm) SetTime(v string) {
	o.Time = v
}

// GetPeriod returns the Period field value
func (o *Alarm) GetPeriod() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetPeriodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *Alarm) SetPeriod(v string) {
	o.Period = v
}

// GetUrl returns the Url field value
func (o *Alarm) GetUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Alarm) SetUrl(v string) {
	o.Url = v
}

// GetEnabled returns the Enabled field value
func (o *Alarm) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Alarm) SetEnabled(v bool) {
	o.Enabled = v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *Alarm) GetVolume() int32 {
	if o == nil || o.Volume == nil {
		var ret int32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetVolumeOk() (*int32, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *Alarm) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given int32 and assigns it to the Volume field.
func (o *Alarm) SetVolume(v int32) {
	o.Volume = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Alarm) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alarm) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Alarm) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Alarm) SetId(v string) {
	o.Id = &v
}

func (o Alarm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["period"] = o.Period
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableAlarm struct {
	value *Alarm
	isSet bool
}

func (v NullableAlarm) Get() *Alarm {
	return v.value
}

func (v *NullableAlarm) Set(val *Alarm) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarm) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarm(val *Alarm) *NullableAlarm {
	return &NullableAlarm{value: val, isSet: true}
}

func (v NullableAlarm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


